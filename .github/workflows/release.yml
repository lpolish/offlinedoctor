name: Build and Release

on:
  push:
    tags:
      - 'v*'  # Push events to matching v*, i.e. v1.0, v20.15.10
  workflow_dispatch:  # Allow manual trigger

jobs:
  build-linux:
    name: Build Linux Packages
    runs-on: ubuntu-latest
    env:
      DEBIAN_FRONTEND: noninteractive
      TZ: UTC
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup timezone
        run: |
          sudo timedatectl set-timezone UTC
          echo "UTC" | sudo tee /etc/timezone
          sudo dpkg-reconfigure -f noninteractive tzdata
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential libnss3-dev libatk-bridge2.0-dev libdrm2 libxss1 libgconf-2-4 libxtst6 libxrandr2 libasound2-dev libpangocairo-1.0-0 libatk1.0-dev libcairo1-dev libgtk-3-dev libgdk-pixbuf2.0-dev
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          echo "=== Linux Build Dependencies ==="
          echo "Node.js version:"
          node --version
          echo "NPM version:"
          npm --version
          echo "Python version:"
          python --version
          echo "Installing Node.js dependencies..."
          npm ci
          echo "Installing Python dependencies..."
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "Dependencies installed successfully"
      
      - name: Build Linux packages
        run: |
          npm run build-linux
          echo "Linux build completed. Checking output..."
          ls -la dist/
          echo "Verifying required files..."
          find dist/ -name "*.AppImage" -o -name "*.deb" | head -10
      
      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-packages
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/**/linux-unpacked/**
          if-no-files-found: warn

  build-windows:
    name: Build Windows Packages
    runs-on: windows-latest
    env:
      TZ: UTC
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          echo "=== Windows Build Dependencies ==="
          node --version
          npm --version
          python --version
          echo "Installing Node.js dependencies..."
          npm ci
          echo "Installing Python dependencies..."
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          echo "Dependencies installed successfully"
      
      - name: Build Windows packages
        run: |
          npm run build-win
          echo "Windows build completed. Checking output..."
          dir dist
      
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-packages
          path: |
            dist/*.exe
            dist/*Setup*.exe
            dist/nsis-web/*
            dist/**/win-unpacked/**
          if-no-files-found: warn

  build-macos:
    name: Build macOS Packages
    runs-on: macos-latest
    env:
      TZ: UTC
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          echo "=== macOS Build Dependencies ==="
          node --version
          npm --version
          python3 --version
          echo "Installing Node.js dependencies..."
          npm ci
          echo "Installing Python dependencies..."
          cd backend
          python3 -m pip install --upgrade pip
          pip3 install -r requirements.txt
          echo "Dependencies installed successfully"
      
      - name: Build macOS packages
        run: |
          npm run build-mac
          echo "macOS build completed. Checking output..."
          ls -la dist/
      
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-packages
          path: |
            dist/*.dmg
            dist/**/mac/**
            dist/**/darwin/**
          if-no-files-found: warn

  release:
    name: Create Release
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') && (success() || failure())
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist/
          merge-multiple: true
        continue-on-error: true
      
      - name: List all available files
        run: |
          echo "=== All available files ==="
          find dist/ -type f -exec ls -lh {} \; || echo "No files found in dist/"
          echo "=== Directory structure ==="
          find dist/ -type d || echo "No directories found"
      
      - name: Organize release files
        run: |
          mkdir -p release-files
          # Copy all executable and installer files
          find dist/ -name "*.AppImage" -exec cp {} release-files/ \; || true
          find dist/ -name "*.deb" -exec cp {} release-files/ \; || true
          find dist/ -name "*.exe" -exec cp {} release-files/ \; || true
          find dist/ -name "*.dmg" -exec cp {} release-files/ \; || true
          
          echo "=== Release files prepared ==="
          ls -la release-files/ || echo "No release files found"
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          files: release-files/*
          generate_release_notes: true
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
